#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# argparser.py
# Description:
# -----------------------------------------------------------------------------
#
# Started on <mar 12-08-2025 17:49:39.433036238 (1755013779)>
# Carlos Linares López <carlos.linares@uc3m.es>
#

"""
Command-line interface parser
"""

# imports
# -----------------------------------------------------------------------------
import argparse

# -----------------------------------------------------------------------------
# create a command parser to parse all params passed to the script program
# -----------------------------------------------------------------------------
def create_arg_parser():
    """create a command parser to parse all params passed to the script program"""

    # initialize a parser
    parser = argparse.ArgumentParser(description="LaTeX→PDF pipeline automation")

    # Group of mandatory arguments
    mandatory = parser.add_argument_group("Mandatory arguments", "The following arguments are mandatory and they must be provided:")
    mandatory.add_argument("texfile",
                           help="Main LaTeX file to process. Only files with suffix '.tex' and '.latex' are accepted.")

    # Group of optional arguments
    optional = parser.add_argument_group("Optional arguments", "The following arguments are optional and can be used to override variables automatically set by this script:")
    optional.add_argument('-p', '--processor',
                          type=str,
                          default="pdflatex",
                          help="What LaTeX processor must be used to compile the main .tex file, e.g., 'latex', 'pdflatex', 'xelatex', etc. By default 'pdflatex'")
    optional.add_argument('-b', '--bib',
                          type=str,
                          help="Tool used to process the bib entries, if any is found. Only 'bibtex' and 'biber' are automatically supported. If none is provided, pytex will guess the right tool to use")
    optional.add_argument('-i', '--index',
                          type=str,
                          help="Tool used to process the indices, if any is found. Only 'makeidx' and 'splitindex' are supported. If none is provided, pytex will guess the right tool to use")
    optional.add_argument('-e', '--encoding',
                          type=str,
                          help="Encoding used to capture the output produced by the different tools. If none is given, the contents of the env variable 'LC_ALL' are used")
    optional.add_argument('-x', '--clear',
                          action="store_true",
                          help="If given, no processing takes place and all ancilliary files generated for the given texfile are automatically removed. No confirmation is requested")
    optional.add_argument('-X', '--delete',
                          action="store_true",
                          help="If given, no processing takes place and all ancilliary files generated for the given texfile and the final pdf are automatically removed, unless the name of the resulting pdf was changed with --output. No confirmation is requested")
    optional.add_argument('-o', '--output',
                          default="",
                          type=str,
                          help="Name of the pdf generated file. If none is given, it will be named after the input filename")
    optional.add_argument('-q', '--quiet',
                          action="store_true",
                          help="If given, only the warnings generated by the bib/index tools are shown. Still, pytex will be showing how many warnings are generated as a result of processing the .tex files")

    # and return the parser
    return parser


# Local Variables:
# mode:python
# fill-column:80
# End:
